apiVersion: v1
kind: Template
metadata:
  name: wordpress-blog
  annotations:
    description: Wordpress and MariaDB.
    iconClass: icon-wordpress
    tags: wordpress, MariaDB
message: |-
  Your wordpress blog has been successfully created
parameters:

- name: SERVICE_NAME
  displayName: Service Name
  description: The name used when creating the required deployment config, route, service etc
    Must be unique and contain only lower-case letters.
  required: true
  value: blog

- name: WORDPRESS_IMAGE_VERSION
  displayName: wordpress Docker image Version.
  value: latest
  required: true  

- name: WORDPRESS_MEMORY
  displayName: Memoy for WORDPRESS pod
  description: Size in Mi.
  value: 200Mi
  required: true

- name: WORDPRESS_USER
  description: The username of database 
  required: true

- name: WORDPRESS_PASSWORD
  description: The password of database 
  required: true

- name: WORDPRESS_DATABASE_NAME
  description: The name of database
  value: wp
  required: true

- name: WORDPRESS_VOLUME_CAPACITY
  displayName: Wordpress Volume Capacity
  description: Volume space available for WordPress source code and content, e.g. 2Gi, 5Gi.
  required: true
  value: 2Gi

- name: MYSQL_VOLUME_CAPACITY
  displayName: MySQL Volume Capacity
  description: Volume space available for MySQL data, e.g. 2Gi, 5Gi.
  required: true
  value: 1Gi


objects:
  # PersistentVolumeClaim: wordpress
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${SERVICE_NAME}-wordpress
#      annotations:
#        volume.beta.kubernetes.io/storage-class: glusterfs-storage-nocache
#        volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
#      finalizers:
#      - kubernetes.io/pvc-protection
    spec:
#      storageClassName: glusterfs-storage-nocache
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${WORDPRESS_VOLUME_CAPACITY}

  # PersistentVolumeClaim: mysql
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${SERVICE_NAME}-mysql
#      annotations:
#        volume.beta.kubernetes.io/storage-class: glusterfs-storage-nocache
#        volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
#      finalizers:
#      - kubernetes.io/pvc-protection
    spec:
#      storageClassName: glusterfs-storage-nocache
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: ${MYSQL_VOLUME_CAPACITY}

# wordpress mysql secrets 
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${SERVICE_NAME}
    stringData:
      mysql-host: ${SERVICE_NAME}-mysql
      mysql-user: ${WORDPRESS_USER}
      mysql-password: ${WORDPRESS_PASSWORD}
      mysql-root-password: ${WORDPRESS_PASSWORD}
      mysql-db-name: ${WORDPRESS_DATABASE_NAME}

# DeploymentConfig: MySQL 
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${SERVICE_NAME}-mysql
      labels:
        app: ${SERVICE_NAME}-mysql
    spec:
      replicas: 1
      selector:
        name: ${SERVICE_NAME}-mysql
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            name: ${SERVICE_NAME}-mysql
        spec:
          containers:
          - name: mysql
            image: mariadb
            env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql-root-password
                  name: ${SERVICE_NAME}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: mysql-user
                  name: ${SERVICE_NAME}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql-password
                  name: ${SERVICE_NAME}
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: mysql-db-name
                  name: ${SERVICE_NAME}
            ports:
            - containerPort: 3306
              protocol: TCP
            resources:
              limits:
                memory: ${WORDPRESS_MEMORY}
            volumeMounts:
            - name: ${SERVICE_NAME}-mysql
              mountPath: /var/lib/mysql/
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
          - name: ${SERVICE_NAME}-mysql
            persistentVolumeClaim:
              claimName: ${SERVICE_NAME}-mysql
# Service: MySQL
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${SERVICE_NAME}-mysql
      name: ${SERVICE_NAME}-mysql
    spec:
      ports:
        - name: 3306-tcp
          port: 3306
          protocol: TCP
          targetPort: 3306
      selector:
        deploymentconfig: ${SERVICE_NAME}-mysql
      sessionAffinity: None
      type: ClusterIP

#wordpress deployment config      
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${SERVICE_NAME}-wordpress
      labels:
        app: ${SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${SERVICE_NAME}-wordpress
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            name: ${SERVICE_NAME}-wordpress
        spec:
          containers:
            - image: 'behroozam/wp-in-production:${WORDPRESS_IMAGE_VERSION}'
              env:
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    key: mysql-user
                    name: ${SERVICE_NAME}
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: mysql-password
                    name: ${SERVICE_NAME}
              - name: MYSQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: mysql-db-name
                    name: ${SERVICE_NAME}
              - name: DB_HOST
                valueFrom:
                  secretKeyRef:
                    key: mysql-host
                    name: ${SERVICE_NAME}
              lifecycle:
                postStart:
                  exec:
                    command: ["/bin/sh", "-c", "cp -r /server/http/public/. /var/www/html && fix-permission "]
              imagePullPolicy: Always
              name: ${SERVICE_NAME}-wordpress
              ports:
                - containerPort: 9000
                  protocol: TCP
              resources:
                limits:
                  memory: "${WORDPRESS_MEMORY}"
              volumeMounts:
                - mountPath: /var/www/html/wp-content
                  name: wp-content-wordpress
                - mountPath: /var/www/html
                  name: shared-files
                - mountPath: /usr/local/etc/php/conf.d/custom-php.ini
                  subPath: custom-php.ini
                  name: php-config-volume
                - mountPath: /var/www/html/wp-config.php
                  subPath: wp-config.php
                  name: wp-config
                        
            - image: 'nginxinc/nginx-unprivileged'
              name: nginx
              ports:
                - containerPort: 8080
                  protocol: TCP
              volumeMounts:
                - mountPath: /var/www/html
                  name: shared-files
                - mountPath: /var/www/html/wp-content
                  name: wp-content-wordpress
                - mountPath: /etc/nginx/nginx.conf
                  subPath: nginx.conf
                  name: nginx-config-volume

          volumes:
            - name: wp-content-wordpress
              persistentVolumeClaim:
                claimName: ${SERVICE_NAME}-wordpress
            - name: shared-files
              emptyDir: {}
            - name: nginx-config-volume
              configMap:
                name: ${SERVICE_NAME}-nginx-config
            - name: php-config-volume
              configMap:
                name: ${SERVICE_NAME}-php-config
            - name: wp-config
              configMap:
                name: ${SERVICE_NAME}-wp-config
# wordpress app service                
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${SERVICE_NAME}-wordpress
      name: ${SERVICE_NAME}-wordpress
    spec:
      ports:
        - name: 80-tcp
          port: 80
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${SERVICE_NAME}-wordpress
      sessionAffinity: None
      type: ClusterIP

# nginx configmap 
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${SERVICE_NAME}-nginx-config
    data:
      nginx.conf: |
        worker_processes  auto;
        error_log  /var/log/nginx/error.log warn;
        pid        /tmp/nginx.pid;

        events {
        }
        http {
                proxy_temp_path /tmp/proxy_temp;
                client_body_temp_path /tmp/client_temp;
                fastcgi_temp_path /tmp/fastcgi_temp;
                uwsgi_temp_path /tmp/uwsgi_temp;
                scgi_temp_path /tmp/scgi_temp;
                include       /etc/nginx/mime.types;
                default_type  application/octet-stream;
                log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                  '$status $body_bytes_sent "$http_referer" '
                                  '"$http_user_agent" "$http_x_forwarded_for"';

                access_log  /var/log/nginx/access.log  main;
                sendfile        on;
                #tcp_nopush     on;
                keepalive_timeout  65;
                gzip  on;
          server {
            listen 8080 default_server;
            listen [::]:8080 default_server;

            # Set nginx to serve files from the shared volume!
            root /var/www/html/;
            server_name _;

            index index.php;

            location / {
              include  /etc/nginx/mime.types;
              try_files $uri /index.php?$query_string;
            }

            location = /favicon.ico { log_not_found off; access_log off; }
            location = /robots.txt  { access_log off; log_not_found off; }

            sendfile off;

            client_max_body_size 100m;

            location ~ \.php$ {
              include fastcgi_params;
              fastcgi_index index.php;
              fastcgi_param REQUEST_METHOD $request_method;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_pass 127.0.0.1:9000;
            }
          }
        }

# php.ini config 
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${SERVICE_NAME}-php-config
    data:
      custom-php.ini: |
        upload_max_filesize = 512M
        max_file_uploads = 40
        max_input_vars = 3000
        max_executaion_time = 600

#  wordpress config 
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${SERVICE_NAME}-wp-config
    data:
      wp-config.php: |
        <?php
        require_once(__DIR__ . '/vendor/autoload.php');
        (new \Dotenv\Dotenv(__DIR__.'/'))->load();
        /**
         * The base configuration for WordPress
         *
         * The wp-config.php creation script uses this file during the
         * installation. You don't have to use the web site, you can
         * copy this file to "wp-config.php" and fill in the values.
         *
         * This file contains the following configurations:
         *
         * * MySQL settings
         * * Secret keys
         * * Database table prefix
         * * ABSPATH
         *
         * @link https://codex.wordpress.org/Editing_wp-config.php
         *
         * @package WordPress
         */

        // ** MySQL settings - You can get this info from your web host ** //
        /** The name of the database for WordPress */
        define('DB_NAME', getenv('MYSQL_DATABASE'));

        /** MySQL database username */
        define('DB_USER', getenv('MYSQL_USER'));

        /** MySQL database password */
        define('DB_PASSWORD', getenv('MYSQL_PASSWORD'));

        /** MySQL hostname */
        define('DB_HOST', getenv('DB_HOST'));

        /** Database Charset to use in creating database tables. */
        define( 'DB_CHARSET', 'utf8' );

        /** The Database Collate type. Don't change this if in doubt. */
        define( 'DB_COLLATE', '' );

        /**#@+
         * Authentication Unique Keys and Salts.
         *
         * Change these to different unique phrases!
         * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
         * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
         *
         * @since 2.6.0
         */
        define( 'AUTH_KEY',         'put your unique phrase here' );
        define( 'SECURE_AUTH_KEY',  'put your unique phrase here' );
        define( 'LOGGED_IN_KEY',    'put your unique phrase here' );
        define( 'NONCE_KEY',        'put your unique phrase here' );
        define( 'AUTH_SALT',        'put your unique phrase here' );
        define( 'SECURE_AUTH_SALT', 'put your unique phrase here' );
        define( 'LOGGED_IN_SALT',   'put your unique phrase here' );
        define( 'NONCE_SALT',       'put your unique phrase here' );

        /**#@-*/

        /**
         * WordPress Database Table prefix.
         *
         * You can have multiple installations in one database if you give each
         * a unique prefix. Only numbers, letters, and underscores please!
         */
        $table_prefix = 'wp_';

        /**
         * For developers: WordPress debugging mode.
         *
         * Change this to true to enable the display of notices during development.
         * It is strongly recommended that plugin and theme developers use WP_DEBUG
         * in their development environments.
         *
         * For information on other constants that can be used for debugging,
         * visit the Codex.
         *
         * @link https://codex.wordpress.org/Debugging_in_WordPress
         */
        define( 'WP_DEBUG', false );

        /* That's all, stop editing! Happy publishing. */

        /** Absolute path to the WordPress directory. */
        if ( ! defined( 'ABSPATH' ) ) {
        	define( 'ABSPATH', dirname( __FILE__ ) . '/' );
        }

        /** Sets up WordPress vars and included files. */
        require_once( ABSPATH . 'wp-settings.php' );